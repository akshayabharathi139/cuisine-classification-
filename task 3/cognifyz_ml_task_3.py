# -*- coding: utf-8 -*-
"""cognifyz ml task 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11hL6-IDuqK3HRcC21OlsC2F_cntZu06J
"""

import numpy as np
import pandas as pd

from google.colab import files
uploaded=files.upload()

df=pd.read_csv('/content/Dataset .csv')
df.head(1)

df.drop('Restaurant ID', axis=1, inplace=True)
df.drop('Country Code', axis=1, inplace=True)
df.drop('City', axis=1, inplace=True)
df.drop('Address', axis=1, inplace=True)
df.drop('Locality', axis=1, inplace=True)
df.drop('Locality Verbose', axis=1, inplace=True)
df.drop('Longitude', axis=1, inplace=True)
df.drop('Latitude', axis=1, inplace=True)
df.drop('Currency', axis=1, inplace=True)
df.drop('Has Table booking', axis=1, inplace=True)
df.drop('Has Online delivery', axis=1, inplace=True)
df.drop('Is delivering now', axis=1, inplace=True)
df.drop('Switch to order menu', axis=1, inplace=True)
df.drop('Price range', axis=1, inplace=True)
df.drop('Aggregate rating', axis=1, inplace=True)
df.drop('Rating color', axis=1, inplace=True)
df.drop('Rating text', axis=1, inplace=True)
df.drop('Votes', axis=1, inplace=True)

df.isnull().sum()

df.dropna(inplace=True)

df.shape

missing_values = df.isna().sum()
missing_values_column = df['Restaurant Name'].isna().sum()
missing_values_column = df['Cuisines'].isna().sum()
missing_values_column = df['Average Cost for two'].isna().sum()

df_cleaned = df.dropna()
df_cleaned = df.dropna(subset=['Restaurant Name'])
df_cleaned = df.dropna(subset=['Cuisines'])
df_cleaned = df.dropna(subset=['Average Cost for two'])

df.describe()

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
df['Restaurant Name'] = label_encoder.fit_transform(df['Restaurant Name'])
df['Cuisines'] = label_encoder.fit_transform(df['Cuisines'])

df

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

X = df[['Restaurant Name', 'Average Cost for two']]
y = df['Cuisines']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

rf_classifier.fit(X_train, y_train)

y_pred = rf_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(classification_rep)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

X = df[['Restaurant Name', 'Average Cost for two']]
y = df['Cuisines']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(classification_rep)